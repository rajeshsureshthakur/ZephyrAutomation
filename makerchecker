public User getUserDetails(int userId) {
    String query = "SELECT manager_name, manager_verified FROM users WHERE user_id = ?";
    User user = null;
    
    try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
         PreparedStatement stmt = conn.prepareStatement(query)) {
        
        stmt.setInt(1, userId);
        ResultSet rs = stmt.executeQuery();
        
        if (rs.next()) {
            String managerName = rs.getString("manager_name");
            int managerVerified = rs.getInt("manager_verified");
            user = new User(managerName, managerVerified);
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
    
    return user;
}



public void showManagerPopup(String managerName, String newManagerName) {
    JPanel panel = new JPanel();
    JLabel label = new JLabel("Mr. " + newManagerName + " has selected your name as Manager. Do you accept?");
    JTextField newManagerField = new JTextField(20);
    newManagerField.setText(managerName);

    int option = JOptionPane.showOptionDialog(null, 
            panel, 
            "Manager Confirmation", 
            JOptionPane.YES_NO_OPTION, 
            JOptionPane.QUESTION_MESSAGE, 
            null, 
            new Object[] {"Accept", "Suggest New Manager"}, 
            "Accept");

    if (option == JOptionPane.YES_OPTION) {
        // On accept, update manager_verified to 1
        updateManagerVerified(managerName, 1);
    } else {
        // On suggest new manager, update the manager name
        String suggestedManager = newManagerField.getText();
        updateManagerName(newManagerName, suggestedManager);
    }
}

public void updateManagerVerified(String managerName, int verifiedStatus) {
    String updateQuery = "UPDATE users SET manager_verified = ? WHERE manager_name = ?";
    
    try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
         PreparedStatement stmt = conn.prepareStatement(updateQuery)) {
        
        stmt.setInt(1, verifiedStatus);
        stmt.setString(2, managerName);
        stmt.executeUpdate();
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

public void updateManagerName(String currentManagerName, String newManagerName) {
    String updateQuery = "UPDATE users SET manager_name = ? WHERE manager_name = ?";
    
    try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
         PreparedStatement stmt = conn.prepareStatement(updateQuery)) {
        
        stmt.setString(1, newManagerName);
        stmt.setString(2, currentManagerName);
        stmt.executeUpdate();
    } catch (SQLException e) {
        e.printStackTrace();
    }
}




public void checkAndPromptManager(int userId, String managerName) {
    User user = getUserDetails(userId);
    
    if (user != null && user.getManagerVerified() == 0 && user.getManagerName().equals(managerName)) {
        showManagerPopup(user.getManagerName(), managerName);
    }
}



// Call this function when a user X registers and specifies Manager Y
checkAndPromptManager(userXId, "ManagerY");



public void showManagerPopup(String managerName, String newManagerName) {
    // Initial confirmation dialog
    JPanel panel = new JPanel(new GridLayout(0, 1));
    JLabel label = new JLabel("Mr. " + newManagerName + " has selected your name as Manager. Do you accept?");
    
    // Add the label to the panel
    panel.add(label);
    
    int option = JOptionPane.showOptionDialog(null, 
            panel, 
            "Manager Confirmation", 
            JOptionPane.YES_NO_CANCEL_OPTION, 
            JOptionPane.QUESTION_MESSAGE, 
            null, 
            new Object[] {"Accept", "Decline", "Suggest New Manager"}, 
            "Accept");
    
    if (option == 0) {
        // On accept, update manager_verified to 1
        updateManagerVerified(managerName, 1);
    } else if (option == 1) {
        // On decline, update manager_verified to 0 (declined)
        updateManagerVerified(managerName, 0);
    } else if (option == 2) {
        // Show another dialog for suggesting a new manager
        JPanel suggestPanel = new JPanel(new GridLayout(0, 1, 5, 5));
        
        JLabel suggestLabel = new JLabel("Please suggest a new manager:");
        JTextField newManagerField = new JTextField(20);
        
        // Default to current manager name
        newManagerField.setText(managerName);
        
        // Add components to panel
        suggestPanel.add(suggestLabel);
        suggestPanel.add(newManagerField);
        
        int suggestOption = JOptionPane.showConfirmDialog(
                null, 
                suggestPanel, 
                "Suggest New Manager", 
                JOptionPane.OK_CANCEL_OPTION, 
                JOptionPane.PLAIN_MESSAGE);
        
        if (suggestOption == JOptionPane.OK_OPTION) {
            // Get the suggested manager name
            String suggestedManager = newManagerField.getText().trim();
            
            // Validate input
            if (suggestedManager.isEmpty()) {
                JOptionPane.showMessageDialog(
                        null, 
                        "Manager name cannot be empty!", 
                        "Error", 
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Update the manager name
            updateManagerName(newManagerName, suggestedManager);
        }
    }
}





public void showManagerPopup(String managerName, String newManagerName) {
    // Initial confirmation dialog
    JPanel panel = new JPanel(new GridLayout(0, 1));
    JLabel label = new JLabel("Mr. " + newManagerName + " has selected your name as Manager. Do you accept?");
    
    // Add the label to the panel
    panel.add(label);
    
    // Create a non-closable JDialog to force user to choose one of the two options
    JDialog dialog = new JDialog((JFrame)null, "Manager Confirmation", true);
    dialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
    
    // Remove window close button functionality
    dialog.addWindowListener(new WindowAdapter() {
        @Override
        public void windowClosing(WindowEvent e) {
            // Do nothing - prevent closing with X button
        }
    });
    
    // Create button panel with only two options
    JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
    
    JButton acceptButton = new JButton("Accept");
    JButton suggestButton = new JButton("Suggest New Manager");
    
    acceptButton.addActionListener(e -> {
        // On accept, update manager_verified to 1
        updateManagerVerified(managerName, 1);
        dialog.dispose();
    });
    
    suggestButton.addActionListener(e -> {
        dialog.dispose();  // Close first dialog
        
        // Show another dialog for suggesting a new manager
        JPanel suggestPanel = new JPanel(new GridLayout(0, 1, 5, 5));
        
        JLabel suggestLabel = new JLabel("Please suggest a new manager:");
        JTextField newManagerField = new JTextField(20);
        
        // Default to current manager name
        newManagerField.setText(managerName);
        
        // Add components to panel
        suggestPanel.add(suggestLabel);
        suggestPanel.add(newManagerField);
        
        // Create another non-closable dialog
        JDialog suggestDialog = new JDialog((JFrame)null, "Suggest New Manager", true);
        suggestDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        
        // Remove window close button functionality
        suggestDialog.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                // Do nothing - prevent closing with X button
            }
        });
        
        // Create button panel
        JPanel suggestButtonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        JButton submitButton = new JButton("Submit");
        
        submitButton.addActionListener(ev -> {
            // Get the suggested manager name
            String suggestedManager = newManagerField.getText().trim();
            
            // Validate input
            if (suggestedManager.isEmpty()) {
                JOptionPane.showMessageDialog(
                        suggestDialog, 
                        "Manager name cannot be empty!", 
                        "Error", 
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Update the manager name
            updateManagerName(newManagerName, suggestedManager);
            suggestDialog.dispose();
        });
        
        suggestButtonPanel.add(submitButton);
        
        // Add panels to dialog
        suggestDialog.setLayout(new BorderLayout());
        suggestDialog.add(suggestPanel, BorderLayout.CENTER);
        suggestDialog.add(suggestButtonPanel, BorderLayout.SOUTH);
        
        // Set size and display
        suggestDialog.pack();
        suggestDialog.setLocationRelativeTo(null);
        suggestDialog.setVisible(true);
    });
    
    // Add buttons to panel
    buttonPanel.add(acceptButton);
    buttonPanel.add(suggestButton);
    
    // Add panels to dialog
    dialog.setLayout(new BorderLayout());
    dialog.add(panel, BorderLayout.CENTER);
    dialog.add(buttonPanel, BorderLayout.SOUTH);
    
    // Set size and display
    dialog.pack();
    dialog.setLocationRelativeTo(null);
    dialog.setVisible(true);
}
