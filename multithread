import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class MainApp {
    public static void main(String[] args) {
        int userId = 101;
        String name = "JohnDoe";
        String token = "abc123";

        // âœ… Create a thread pool with 3 threads
        ExecutorService executor = Executors.newFixedThreadPool(3);

        // âœ… Submit tasks to ExecutorService
        executor.submit(new File1(userId, name, token));
        executor.submit(new File2(userId, name, token));
        executor.submit(new File3(userId, name, token));

        // âœ… Shutdown the executor after tasks complete
        executor.shutdown();
    }
}




public class File3 implements Runnable {
    private int userId;
    private String name;
    private String token;

    public File3(int userId, String name, String token) {
        this.userId = userId;
        this.name = name;
        this.token = token;
    }

    @Override
    public void run() {
        executeTask();
    }

    private void executeTask() {
        System.out.println("File3 running for user: " + userId);
        // ðŸ”¥ Your DB write logic here
    }
}




import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class DynamicThreadPoolExample {
    public static void main(String[] args) {
        List<String> parentFolders = List.of("A", "B", "C", "D", "E"); // 5 folders

        // âœ… Dynamically set thread pool size based on list size
        int threadPoolSize = Math.min(parentFolders.size(), Runtime.getRuntime().availableProcessors()); 

        ExecutorService executor = Executors.newFixedThreadPool(threadPoolSize);
        System.out.println("Thread pool size: " + threadPoolSize);

        // âœ… Submit each folder as a task
        for (String folder : parentFolders) {
            executor.submit(() -> processFolder(folder));
        }

        executor.shutdown(); // Shutdown after tasks are submitted
    }

    private static void processFolder(String folder) {
        System.out.println("Processing folder: " + folder + " in thread: " + Thread.currentThread().getName());

        // ðŸ”¥ Simulating DB write (2 seconds delay)
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }

        System.out.println("Completed folder: " + folder);
    }
}


 try {
            // âœ… Wait indefinitely (or set a reasonable timeout) until all tasks are done
            if (subExecutor.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS)) {
                System.out.println("All tasks completed.");
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }


