private void showImportRequirementsWindow() {
    JDialog dialog = new JDialog(this, "Import Requirements", true);
    dialog.setLayout(new BorderLayout(10, 10));
    dialog.setSize(600, 300);
    dialog.setLocationRelativeTo(this);

    JPanel contentPanel = new JPanel();
    contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));
    contentPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

    // Release Panel
    JPanel releasePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
    JLabel releaseLabel = new JLabel("Select Release:");
    releaseLabel.setPreferredSize(new Dimension(100, 25));

    // Load all releases at once into memory
    List<ReleaseItem> allReleases = new ArrayList<>();
    try {
        Class.forName("oracle.jdbc.driver.OracleDriver");
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            String sql = "SELECT RELEASE_ID, RELEASE_NAME FROM RELEASES WHERE PROJECT_ID = ? ORDER BY RELEASE_NAME";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setInt(1, getUserProjectId());
                try (ResultSet rs = pstmt.executeQuery()) {
                    while (rs.next()) {
                        allReleases.add(new ReleaseItem(
                            rs.getInt("RELEASE_ID"),
                            rs.getString("RELEASE_NAME")
                        ));
                    }
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(dialog,
            "Error loading releases: " + e.getMessage(),
            "Error",
            JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Create ComboBox
    DefaultComboBoxModel<ReleaseItem> model = new DefaultComboBoxModel<>();
    JComboBox<ReleaseItem> releaseDropdown = new JComboBox<>(model);
    releaseDropdown.setEditable(true);
    releaseDropdown.setPreferredSize(new Dimension(300, 25));

    // Show initial 5 items
    for (int i = 0; i < Math.min(5, allReleases.size()); i++) {
        model.addElement(allReleases.get(i));
    }

    // Add search functionality
    JTextField textField = (JTextField) releaseDropdown.getEditor().getEditorComponent();
    textField.getDocument().addDocumentListener(new DocumentListener() {
        @Override
        public void insertUpdate(DocumentEvent e) { search(); }
        @Override
        public void removeUpdate(DocumentEvent e) { search(); }
        @Override
        public void changedUpdate(DocumentEvent e) { search(); }

        private void search() {
            String searchText = textField.getText().toLowerCase().trim();
            model.removeAllElements();

            // If empty or short search text, show first 5
            if (searchText.length() < 2) {
                for (int i = 0; i < Math.min(5, allReleases.size()); i++) {
                    model.addElement(allReleases.get(i));
                }
                return;
            }

            // Search in memory and add matching items
            int count = 0;
            for (ReleaseItem item : allReleases) {
                if (item.getName().toLowerCase().contains(searchText)) {
                    model.addElement(item);
                    count++;
                    if (count >= 5) break;  // Limit to 5 results
                }
            }
        }
    });

    releasePanel.add(releaseLabel);
    releasePanel.add(releaseDropdown);

    // Add rest of your components (checkbox, import button, etc.)
    JCheckBox updateJqlCheckbox = new JCheckBox("I want to update JQL's");
    updateJqlCheckbox.addActionListener(e -> {
        if (updateJqlCheckbox.isSelected()) {
            ReleaseItem selectedRelease = (ReleaseItem) releaseDropdown.getSelectedItem();
            if (selectedRelease != null) {
                showJqlUpdateDialog(selectedRelease.getId());
            } else {
                JOptionPane.showMessageDialog(dialog,
                    "Please select a release first",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
                updateJqlCheckbox.setSelected(false);
            }
        }
    });

    JButton importButton = new JButton("Import");
    importButton.addActionListener(e -> {
        ReleaseItem selectedRelease = (ReleaseItem) releaseDropdown.getSelectedItem();
        if (selectedRelease != null) {
            handleImport(selectedRelease.getId());
            dialog.dispose();
        } else {
            JOptionPane.showMessageDialog(dialog,
                "Please select a release first",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    });

    // Add components to panels
    JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
    buttonPanel.add(importButton);

    contentPanel.add(releasePanel);
    contentPanel.add(Box.createVerticalStrut(20));
    contentPanel.add(updateJqlCheckbox);
    contentPanel.add(Box.createVerticalStrut(20));
    contentPanel.add(buttonPanel);

    dialog.add(contentPanel);
    dialog.setVisible(true);
}
