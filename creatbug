// Create custom class for Scrum
class ScrumItem {
    private int id;
    private String name;
    
    public ScrumItem(int id, String name) {
        this.id = id;
        this.name = name;
    }
    
    public int getId() { return id; }
    public String getName() { return name; }
    
    // This is what will show in the ComboBox
    @Override
    public String toString() { 
        return name; 
    }
}

// Modify the ComboBox to use ScrumItem
JComboBox<ScrumItem> scrumComboBox = new JComboBox<>();

// Modify the load function
private void loadScrumData(JComboBox<ScrumItem> comboBox) {
    try {
        Class.forName("oracle.jdbc.driver.OracleDriver");
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            String sql = "SELECT SCRUM_ID, SCRUM_NAME FROM JIRADATA ORDER BY SCRUM_NAME";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                try (ResultSet rs = pstmt.executeQuery()) {
                    DefaultComboBoxModel<ScrumItem> model = (DefaultComboBoxModel<ScrumItem>)comboBox.getModel();
                    model.removeAllElements();
                    model.addElement(new ScrumItem(0, "Select Scrum"));
                    while (rs.next()) {
                        model.addElement(new ScrumItem(
                            rs.getInt("SCRUM_ID"),
                            rs.getString("SCRUM_NAME")
                        ));
                    }
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error loading Scrum data: " + e.getMessage());
    }
}

// When getting selected value
ScrumItem selectedScrum = (ScrumItem)scrumComboBox.getSelectedItem();
int scrumId = selectedScrum.getId();  // This is the ID you'll send to your create issue method







private void loadAllDropdownData(JComboBox<String> artComboBox, JComboBox<String> scrumComboBox, JComboBox<String> releaseComboBox) {
    System.out.println("Starting to load dropdown data..."); 
    try {
        Class.forName("oracle.jdbc.driver.OracleDriver");
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            String sql = "SELECT DISTINCT ART_NAME, SCRUM_NAME, RELEASE_VERSION FROM JIRADATA ORDER BY ART_NAME";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                try (ResultSet rs = pstmt.executeQuery()) {
                    // Get models for each combo box
                    DefaultComboBoxModel<String> artModel = (DefaultComboBoxModel<String>)artComboBox.getModel();
                    DefaultComboBoxModel<String> scrumModel = (DefaultComboBoxModel<String>)scrumComboBox.getModel();
                    DefaultComboBoxModel<String> releaseModel = (DefaultComboBoxModel<String>)releaseComboBox.getModel();
                    
                    // Clear existing items
                    artModel.removeAllElements();
                    scrumModel.removeAllElements();
                    releaseModel.removeAllElements();
                    
                    // Add default selections
                    artModel.addElement("Select ART");
                    scrumModel.addElement("Select Scrum");
                    releaseModel.addElement("Select Release");
                    
                    // Create sets to store unique values
                    Set<String> artSet = new HashSet<>();
                    Set<String> scrumSet = new HashSet<>();
                    Set<String> releaseSet = new HashSet<>();
                    
                    while (rs.next()) {
                        artSet.add(rs.getString("ART_NAME"));
                        scrumSet.add(rs.getString("SCRUM_NAME"));
                        releaseSet.add(rs.getString("RELEASE_VERSION"));
                    }
                    
                    // Add sorted values to combo boxes
                    artSet.stream().sorted().forEach(artModel::addElement);
                    scrumSet.stream().sorted().forEach(scrumModel::addElement);
                    releaseSet.stream().sorted().forEach(releaseModel::addElement);
                    
                    System.out.println("Loaded ARTs: " + artSet.size());
                    System.out.println("Loaded Scrums: " + scrumSet.size());
                    System.out.println("Loaded Releases: " + releaseSet.size());
                }
            }
        }
    } catch (Exception e) {
        System.out.println("Error loading dropdown data: " + e.getMessage());
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error loading dropdown data: " + e.getMessage());
    }
}

loadAllDropdownData(artComboBox, scrumComboBox, releaseComboBox);



private void loadARTData(JComboBox<String> comboBox) {
   try {
       Class.forName("oracle.jdbc.driver.OracleDriver");
       try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
           String sql = "SELECT DISTINCT ART_NAME FROM JIRADATA ORDER BY ART_NAME";
           try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
               try (ResultSet rs = pstmt.executeQuery()) {
                   DefaultComboBoxModel<String> model = (DefaultComboBoxModel<String>)comboBox.getModel();
                   model.removeAllElements();
                   model.addElement("Select ART");
                   while (rs.next()) {
                       model.addElement(rs.getString("ART_NAME"));
                   }
               }
           }
       }
   } catch (Exception e) {
       e.printStackTrace();
       JOptionPane.showMessageDialog(null, "Error loading ART data: " + e.getMessage());
   }
}

private void showCreateBugTaskScreen() {
    JPanel bugTaskPanel = new JPanel(new BorderLayout());
    bugTaskPanel.setPreferredSize(new Dimension(1200, 800));

    // Title
    JLabel titleLabel = new JLabel("Create Bug/Task");
    titleLabel.setFont(new Font("Arial", Font.BOLD, 24));
    JPanel titlePanel = new JPanel();
    titlePanel.add(titleLabel);

    // Form Panel using GridBagLayout for better control
    JPanel formPanel = new JPanel(new GridBagLayout());
    GridBagConstraints gbc = new GridBagConstraints();
    gbc.insets = new Insets(5, 10, 5, 10);
    gbc.fill = GridBagConstraints.HORIZONTAL;
    gbc.anchor = GridBagConstraints.WEST;

    // Initialize components
    DefaultComboBoxModel<String> artModel = new DefaultComboBoxModel<>();
    JComboBox<String> artComboBox = new JComboBox<>(artModel);
    JTextField artSearchField = new JTextField(20);

    DefaultComboBoxModel<String> scrumModel = new DefaultComboBoxModel<>();
    JComboBox<String> scrumComboBox = new JComboBox<>(scrumModel);
    JTextField scrumSearchField = new JTextField(20);

    DefaultComboBoxModel<String> releaseModel = new DefaultComboBoxModel<>();
    JComboBox<String> releaseComboBox = new JComboBox<>(releaseModel);
    JTextField releaseSearchField = new JTextField(20);

    String[] priorities = {"Select Priority", "Highest", "High", "Medium", "Low", "Lowest"};
    JComboBox<String> priorityComboBox = new JComboBox<>(priorities);
    
    JTextField summaryField = new JTextField(40);
    JTextField apisField = new JTextField(40);
    JTextField labelsField = new JTextField(40);
    JTextField assigneeField = new JTextField(40);

    // Add components with labels
    // ART
    gbc.gridy = 0;
    gbc.gridx = 0;
    formPanel.add(new JLabel("Agile Release Train:"), gbc);
    gbc.gridx = 1;
    JPanel artPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
    artPanel.add(artComboBox);
    artPanel.add(new JLabel("Search:"));
    artPanel.add(artSearchField);
    formPanel.add(artPanel, gbc);

    // Scrum Team
    gbc.gridy = 1;
    gbc.gridx = 0;
    formPanel.add(new JLabel("Scrum Team:"), gbc);
    gbc.gridx = 1;
    JPanel scrumPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
    scrumPanel.add(scrumComboBox);
    scrumPanel.add(new JLabel("Search:"));
    scrumPanel.add(scrumSearchField);
    formPanel.add(scrumPanel, gbc);

    // Release Version
    gbc.gridy = 2;
    gbc.gridx = 0;
    formPanel.add(new JLabel("Release Version:"), gbc);
    gbc.gridx = 1;
    JPanel releasePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
    releasePanel.add(releaseComboBox);
    releasePanel.add(new JLabel("Search:"));
    releasePanel.add(releaseSearchField);
    formPanel.add(releasePanel, gbc);

    // Priority
    gbc.gridy = 3;
    gbc.gridx = 0;
    formPanel.add(new JLabel("Priority:"), gbc);
    gbc.gridx = 1;
    formPanel.add(priorityComboBox, gbc);

    // Summary
    gbc.gridy = 4;
    gbc.gridx = 0;
    formPanel.add(new JLabel("Summary:"), gbc);
    gbc.gridx = 1;
    formPanel.add(summaryField, gbc);

    // Impacted APIs
    gbc.gridy = 5;
    gbc.gridx = 0;
    formPanel.add(new JLabel("Impacted APIs:"), gbc);
    gbc.gridx = 1;
    formPanel.add(apisField, gbc);

    // Labels
    gbc.gridy = 6;
    gbc.gridx = 0;
    formPanel.add(new JLabel("Labels:"), gbc);
    gbc.gridx = 1;
    formPanel.add(labelsField, gbc);

    // Assignee
    gbc.gridy = 7;
    gbc.gridx = 0;
    formPanel.add(new JLabel("Assignee:"), gbc);
    gbc.gridx = 1;
    formPanel.add(assigneeField, gbc);

    // Load data for dropdowns
    loadARTData(artModel);
    loadScrumData(scrumModel);
    loadReleaseData(releaseModel);

    // Add search functionality
    setupSearchFilter(artSearchField, artComboBox);
    setupSearchFilter(scrumSearchField, scrumComboBox);
    setupSearchFilter(releaseSearchField, releaseComboBox);

    // Buttons Panel
    JPanel buttonPanel = new JPanel();
    JButton createButton = new JButton("Create Issue");
    JButton backButton = new JButton("Back");

    createButton.addActionListener(e -> {
        createIssue(
            (String) artComboBox.getSelectedItem(),
            (String) scrumComboBox.getSelectedItem(),
            (String) releaseComboBox.getSelectedItem(),
            (String) priorityComboBox.getSelectedItem(),
            summaryField.getText(),
            apisField.getText(),
            labelsField.getText(),
            assigneeField.getText()
        );
    });

    backButton.addActionListener(e -> cardLayout.show(mainPanel, "PREVIOUS_SCREEN"));

    buttonPanel.add(createButton);
    buttonPanel.add(backButton);

    // Main panel assembly
    bugTaskPanel.add(titlePanel, BorderLayout.NORTH);
    bugTaskPanel.add(formPanel, BorderLayout.CENTER);
    bugTaskPanel.add(buttonPanel, BorderLayout.SOUTH);

    mainPanel.add(bugTaskPanel, "CREATE_BUG_TASK");
    cardLayout.show(mainPanel, "CREATE_BUG_TASK");
}

// Load data from database
private void loadARTData(DefaultComboBoxModel<String> model) {
    try {
        Class.forName("oracle.jdbc.driver.OracleDriver");
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            String sql = "SELECT DISTINCT ART_NAME FROM JIRADATA ORDER BY ART_NAME";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                try (ResultSet rs = pstmt.executeQuery()) {
                    model.addElement("Select ART");
                    while (rs.next()) {
                        model.addElement(rs.getString("ART_NAME"));
                    }
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error loading ART data: " + e.getMessage());
    }
}

// Similar methods for Scrum and Release data
private void loadScrumData(DefaultComboBoxModel<String> model) {
    // Similar to loadARTData but with SCRUM_TEAM column
}

private void loadReleaseData(DefaultComboBoxModel<String> model) {
    // Similar to loadARTData but with RELEASE_VERSION column
}

// Search filter setup
private void setupSearchFilter(JTextField searchField, JComboBox<String> comboBox) {
    DefaultComboBoxModel<String> originalModel = (DefaultComboBoxModel<String>) comboBox.getModel();
    ArrayList<String> items = new ArrayList<>();
    for (int i = 0; i < originalModel.getSize(); i++) {
        items.add(originalModel.getElementAt(i));
    }

    searchField.getDocument().addDocumentListener(new DocumentListener() {
        public void changedUpdate(DocumentEvent e) { filter(); }
        public void removeUpdate(DocumentEvent e) { filter(); }
        public void insertUpdate(DocumentEvent e) { filter(); }

        private void filter() {
            String filter = searchField.getText();
            DefaultComboBoxModel<String> filteredModel = new DefaultComboBoxModel<>();
            for (String item : items) {
                if (item.toLowerCase().contains(filter.toLowerCase())) {
                    filteredModel.addElement(item);
                }
            }
            comboBox.setModel(filteredModel);
            if (!filter.isEmpty()) {
                comboBox.showPopup();
            }
        }
    });
}

private void createIssue(String art, String scrum, String release, 
                        String priority, String summary, String apis, 
                        String labels, String assignee) {
    try {
        // Call your issue creation Java file here
        JiraIssueCreator.createIssue(art, scrum, release, priority, 
                                    summary, apis, labels, assignee);
        JOptionPane.showMessageDialog(null, "Issue created successfully!");
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error creating issue: " + e.getMessage());
    }
}
