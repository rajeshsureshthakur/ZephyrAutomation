private void showCreateReleaseScreen() {
        JPanel createReleasePanel = new JPanel();
        createReleasePanel.setLayout(new BorderLayout());

        // Title at the top
        JPanel titlePanel = new JPanel();
        JLabel titleLabel = new JLabel("Create Release");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 28));
        titlePanel.add(titleLabel);
        createReleasePanel.add(titlePanel, BorderLayout.NORTH);

        // Main content panel with null layout for absolute positioning
        JPanel contentPanel = new JPanel(null);  // Using null layout
        contentPanel.setPreferredSize(new Dimension(600, 600));  // Fixed size

        // Project Selection - Always visible
        JLabel projectLabel = new JLabel("Select Project: *");
        projectLabel.setFont(new Font("Arial", Font.PLAIN, 16));
        projectLabel.setBounds(50, 20, 150, 30);
        
        projectDropdown = new JComboBox<>();
        projectDropdown.setFont(new Font("Arial", Font.PLAIN, 16));
        projectDropdown.setBounds(200, 20, 300, 30);
        populateProjectDropdown(projectDropdown);

        // Release Name - Initially invisible
        JLabel nameLabel = new JLabel("Release Name: *");
        nameLabel.setFont(new Font("Arial", Font.PLAIN, 16));
        nameLabel.setBounds(50, 70, 150, 30);
        nameLabel.setVisible(false);
        
        JTextField nameField = new JTextField();
        nameField.setFont(new Font("Arial", Font.PLAIN, 16));
        nameField.setBounds(200, 70, 300, 30);
        nameField.setVisible(false);

        // Start Date - Initially invisible
        JLabel startDateLabel = new JLabel("Start Date: *");
        startDateLabel.setFont(new Font("Arial", Font.PLAIN, 16));
        startDateLabel.setBounds(50, 120, 150, 30);
        startDateLabel.setVisible(false);
        
        JDateChooser startDateChooser = new JDateChooser();
        startDateChooser.setFont(new Font("Arial", Font.PLAIN, 16));
        startDateChooser.setBounds(200, 120, 300, 30);
        startDateChooser.setVisible(false);

        // End Date - Initially invisible
        JLabel endDateLabel = new JLabel("End Date: *");
        endDateLabel.setFont(new Font("Arial", Font.PLAIN, 16));
        endDateLabel.setBounds(50, 170, 150, 30);
        endDateLabel.setVisible(false);
        
        JDateChooser endDateChooser = new JDateChooser();
        endDateChooser.setFont(new Font("Arial", Font.PLAIN, 16));
        endDateChooser.setBounds(200, 170, 300, 30);
        endDateChooser.setVisible(false);

        // Child Folders - Initially invisible
        JPanel folderPanel = new JPanel(null);
        folderPanel.setBorder(BorderFactory.createTitledBorder("Folder Structure"));
        folderPanel.setBounds(50, 220, 500, 100);
        folderPanel.setVisible(false);

        JLabel childLabel = new JLabel("Child Folders:");
        childLabel.setFont(new Font("Arial", Font.PLAIN, 16));
        childLabel.setBounds(20, 30, 100, 30);
        
        JTextField childField = new JTextField();
        childField.setFont(new Font("Arial", Font.PLAIN, 16));
        childField.setBounds(120, 30, 250, 30);
        
        JLabel noteLabel = new JLabel("(Comma separated)");
        noteLabel.setFont(new Font("Arial", Font.ITALIC, 12));
        noteLabel.setBounds(380, 30, 120, 30);

        folderPanel.add(childLabel);
        folderPanel.add(childField);
        folderPanel.add(noteLabel);

        // Planning Section - Initially invisible
        JPanel planningPanel = new JPanel(null);
        planningPanel.setBorder(BorderFactory.createTitledBorder("Planning Folder Structure"));
        planningPanel.setBounds(50, 340, 500, 150);
        planningPanel.setVisible(false);

        JLabel cyclesLabel = new JLabel("Project Cycle's:");
        cyclesLabel.setFont(new Font("Arial", Font.PLAIN, 16));
        cyclesLabel.setBounds(20, 30, 100, 30);

        testCycles = new int[]{0, 0, 0, 0};
        String[] cycleNames = {"Load Test", "Endurance Test", "Sanity", "Standalone"};
        JCheckBox[] checkboxes = new JCheckBox[cycleNames.length];

        // Position checkboxes horizontally
        int xOffset = 20;
        for (int i = 0; i < cycleNames.length; i++) {
            checkboxes[i] = new JCheckBox(cycleNames[i]);
            checkboxes[i].setFont(new Font("Arial", Font.PLAIN, 14));
            checkboxes[i].setBounds(xOffset, 70, 120, 30);
            final int index = i;
            
            checkboxes[i].addActionListener(e -> {
        if (checkboxes[index].isSelected()) {
            String input = JOptionPane.showInputDialog(
                createReleasePanel,
                "Enter number of phases for " + cycleNames[index] + ":",
                "Number of Phases",
                JOptionPane.QUESTION_MESSAGE
            );
            if (input != null) {
                try {
                    int phases = Integer.parseInt(input);
                    if (phases > 0) {
                        testCycles[index] = phases;
                    } else {
                        checkboxes[index].setSelected(false);
                        testCycles[index] = 0;  // Reset to 0 instead of -1
                        JOptionPane.showMessageDialog(createReleasePanel,
                            "Please enter a positive number",
                            "Invalid Input",
                            JOptionPane.ERROR_MESSAGE);
                    }
                } catch (NumberFormatException ex) {
                    checkboxes[index].setSelected(false);
                    testCycles[index] = 0;  // Reset to 0 instead of -1
                    JOptionPane.showMessageDialog(createReleasePanel,
                        "Please enter a valid number",
                        "Invalid Input",
                        JOptionPane.ERROR_MESSAGE);
                }
            } else {
                checkboxes[index].setSelected(false);
                testCycles[index] = 0;  // Reset to 0 instead of -1
            }
        } else {
            testCycles[index] = 0;  // Reset to 0 when unchecked
        }
    });

            planningPanel.add(checkboxes[i]);
            xOffset += 130;
        }
        planningPanel.add(cyclesLabel);

        // Buttons - Fixed positions
        JButton submitButton = new JButton("Create Release");
        submitButton.setFont(new Font("Arial", Font.PLAIN, 14));
        submitButton.setBounds(200, 510, 200, 35);
        submitButton.setVisible(false);

        JButton backButton = new JButton("Back");
        backButton.setFont(new Font("Arial", Font.PLAIN, 14));
        backButton.setBounds(200, 550, 200, 35);

        // Add components to content panel
        contentPanel.add(projectLabel);
        contentPanel.add(projectDropdown);
        contentPanel.add(nameLabel);
        contentPanel.add(nameField);
        contentPanel.add(startDateLabel);
        contentPanel.add(startDateChooser);
        contentPanel.add(endDateLabel);
        contentPanel.add(endDateChooser);
        contentPanel.add(folderPanel);
        contentPanel.add(planningPanel);
        contentPanel.add(submitButton);
        contentPanel.add(backButton);

        // Add content panel to a scroll pane
        JScrollPane scrollPane = new JScrollPane(contentPanel);
        createReleasePanel.add(scrollPane, BorderLayout.CENTER);

        // Add listeners (keep existing listener code)
        projectDropdown.addActionListener(e -> {
            if (projectDropdown.getSelectedItem() != null && 
                projectDropdown.getSelectedIndex() > 0) {
                nameLabel.setVisible(true);
                nameField.setVisible(true);
                startDateLabel.setVisible(true);
                startDateChooser.setVisible(true);
            }
        });

        startDateChooser.addPropertyChangeListener("date", evt -> {
            if (startDateChooser.getDate() != null) {
                endDateLabel.setVisible(true);
                endDateChooser.setVisible(true);
            }
        });

        endDateChooser.addPropertyChangeListener("date", evt -> {
            if (endDateChooser.getDate() != null && startDateChooser.getDate() != null) {
                if (endDateChooser.getDate().before(startDateChooser.getDate())) {
                    JOptionPane.showMessageDialog(createReleasePanel,
                        "End date cannot be before start date",
                        "Invalid Date",
                        JOptionPane.ERROR_MESSAGE);
                    endDateChooser.setDate(null);
                } else {
                    folderPanel.setVisible(true);
                    planningPanel.setVisible(true);
                    submitButton.setVisible(true);
                }
            }
        });

        // Keep existing button listeners...

        // Add to main container
        mainPanel.add(createReleasePanel, "CREATE_RELEASE");
        cardLayout.show(mainPanel, "CREATE_RELEASE");
    }
