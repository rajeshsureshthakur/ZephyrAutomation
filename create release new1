private void showCreateReleaseScreen() {
        JPanel createReleasePanel = new JPanel();
        createReleasePanel.setLayout(new BoxLayout(createReleasePanel, BoxLayout.Y_AXIS));

        // Title
        JLabel titleLabel = new JLabel("Create Release");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 28));
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

        // Main content panel
        JPanel contentPanel = new JPanel();
        contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));
        contentPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        // Project Selection
        JPanel projectPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JLabel projectLabel = new JLabel("Select Project: *");
        projectLabel.setFont(new Font("Arial", Font.PLAIN, 16));
        projectDropdown = new JComboBox<>();
        projectDropdown.setFont(new Font("Arial", Font.PLAIN, 16));
        projectDropdown.setPreferredSize(new Dimension(300, 30));
        populateProjectDropdown(projectDropdown);
        projectPanel.add(projectLabel);
        projectPanel.add(projectDropdown);

        // Release Name Panel (initially invisible)
        JPanel namePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JLabel nameLabel = new JLabel("Release Name: *");
        nameLabel.setFont(new Font("Arial", Font.PLAIN, 16));
        JTextField nameField = new JTextField();
        nameField.setFont(new Font("Arial", Font.PLAIN, 16));
        nameField.setPreferredSize(new Dimension(300, 30));
        namePanel.add(nameLabel);
        namePanel.add(nameField);
        namePanel.setVisible(false);

        // Start Date Panel (initially invisible)
        JPanel startDatePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JLabel startDateLabel = new JLabel("Start Date: *");
        startDateLabel.setFont(new Font("Arial", Font.PLAIN, 16));
        JDateChooser startDateChooser = new JDateChooser();
        startDateChooser.setFont(new Font("Arial", Font.PLAIN, 16));
        startDateChooser.setPreferredSize(new Dimension(300, 30));
        startDatePanel.add(startDateLabel);
        startDatePanel.add(startDateChooser);
        startDatePanel.setVisible(false);

        // End Date Panel (initially invisible)
        JPanel endDatePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JLabel endDateLabel = new JLabel("End Date: *");
        endDateLabel.setFont(new Font("Arial", Font.PLAIN, 16));
        JDateChooser endDateChooser = new JDateChooser();
        endDateChooser.setFont(new Font("Arial", Font.PLAIN, 16));
        endDateChooser.setPreferredSize(new Dimension(300, 30));
        endDatePanel.add(endDateLabel);
        endDatePanel.add(endDateChooser);
        endDatePanel.setVisible(false);

        // Child Folders Panel (initially invisible)
        JPanel childFolderPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        childFolderPanel.setBorder(BorderFactory.createTitledBorder("Folder Structure"));
        JLabel childLabel = new JLabel("Child Folders:");
        childLabel.setFont(new Font("Arial", Font.PLAIN, 16));
        JTextField childField = new JTextField(20);
        childField.setPreferredSize(new Dimension(300, 30));
        JLabel noteLabel = new JLabel("(Comma separated)");
        childFolderPanel.add(childLabel);
        childFolderPanel.add(childField);
        childFolderPanel.add(noteLabel);
        childFolderPanel.setVisible(false);

        // Planning Section (initially invisible)
        JPanel planningSection = new JPanel();
        planningSection.setLayout(new BoxLayout(planningSection, BoxLayout.Y_AXIS));
        planningSection.setBorder(BorderFactory.createTitledBorder("Planning Folder Structure"));
        JLabel cyclesLabel = new JLabel("Project Cycle's:");
        cyclesLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        
        JPanel checkboxPanel = new JPanel(new GridLayout(0, 1, 5, 5));
        String[] cycleNames = {"Load Test", "Endurance Test", "Sanity", "Standalone"};
        testCycles = new int[]{-1, -1, -1, -1};
        
        for (int i = 0; i < cycleNames.length; i++) {
            JCheckBox checkbox = new JCheckBox(cycleNames[i]);
            final int index = i;
            checkbox.addActionListener(e -> {
                if (checkbox.isSelected()) {
                    String input = JOptionPane.showInputDialog(
                        "Enter number of phases for " + cycleNames[index] + ":",
                        "Number of Phases",
                        JOptionPane.QUESTION_MESSAGE
                    );
                    if (input != null) {
                        try {
                            int phases = Integer.parseInt(input);
                            if (phases > 0) {
                                testCycles[index] = phases;
                            } else {
                                checkbox.setSelected(false);
                                testCycles[index] = -1;
                            }
                        } catch (NumberFormatException ex) {
                            checkbox.setSelected(false);
                            testCycles[index] = -1;
                        }
                    } else {
                        checkbox.setSelected(false);
                        testCycles[index] = -1;
                    }
                } else {
                    testCycles[index] = -1;
                }
            });
            checkboxPanel.add(checkbox);
        }
        planningSection.add(cyclesLabel);
        planningSection.add(checkboxPanel);
        planningSection.setVisible(false);

        // Submit Button (initially invisible)
        JButton submitButton = new JButton("Create Release");
        submitButton.setFont(new Font("Arial", Font.PLAIN, 14));
        submitButton.setMaximumSize(new Dimension(200, 35));
        submitButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        submitButton.setVisible(false);

        // Back Button
        JButton backButton = new JButton("Back");
        backButton.setFont(new Font("Arial", Font.PLAIN, 14));
        backButton.setMaximumSize(new Dimension(200, 35));
        backButton.setAlignmentX(Component.CENTER_ALIGNMENT);

        // Add components to content panel
        contentPanel.add(projectPanel);
        contentPanel.add(Box.createVerticalStrut(20));
        contentPanel.add(namePanel);
        contentPanel.add(Box.createVerticalStrut(20));
        contentPanel.add(startDatePanel);
        contentPanel.add(Box.createVerticalStrut(20));
        contentPanel.add(endDatePanel);
        contentPanel.add(Box.createVerticalStrut(20));
        contentPanel.add(childFolderPanel);
        contentPanel.add(Box.createVerticalStrut(20));
        contentPanel.add(planningSection);
        contentPanel.add(Box.createVerticalStrut(20));
        contentPanel.add(submitButton);
        contentPanel.add(Box.createVerticalStrut(20));
        contentPanel.add(backButton);

        // Add title and content to main panel
        createReleasePanel.add(Box.createVerticalStrut(20));
        createReleasePanel.add(titleLabel);
        createReleasePanel.add(Box.createVerticalStrut(20));
        createReleasePanel.add(contentPanel);

        // Add listeners
        projectDropdown.addActionListener(e -> {
            if (projectDropdown.getSelectedItem() != null && 
                projectDropdown.getSelectedIndex() > 0) {
                namePanel.setVisible(true);
                startDatePanel.setVisible(true);
                SwingUtilities.invokeLater(() -> {
                    contentPanel.revalidate();
                    contentPanel.repaint();
                });
            }
        });

        startDateChooser.addPropertyChangeListener("date", evt -> {
            if (startDateChooser.getDate() != null) {
                endDatePanel.setVisible(true);
                SwingUtilities.invokeLater(() -> {
                    contentPanel.revalidate();
                    contentPanel.repaint();
                });
            }
        });

        endDateChooser.addPropertyChangeListener("date", evt -> {
            if (endDateChooser.getDate() != null && startDateChooser.getDate() != null) {
                if (endDateChooser.getDate().before(startDateChooser.getDate())) {
                    JOptionPane.showMessageDialog(createReleasePanel,
                        "End date cannot be before start date",
                        "Invalid Date",
                        JOptionPane.ERROR_MESSAGE);
                    endDateChooser.setDate(null);
                } else {
                    childFolderPanel.setVisible(true);
                    planningSection.setVisible(true);
                    submitButton.setVisible(true);
                    SwingUtilities.invokeLater(() -> {
                        contentPanel.revalidate();
                        contentPanel.repaint();
                    });
                }
            }
        });

        submitButton.addActionListener(e -> {
            if (validateFields(nameField, startDateChooser, endDateChooser)) {
                submitButton.setEnabled(false);
                try {
                    // Get all required values and call ReleaseCreation
                    String[] folderArray = childField.getText().trim().split(",");
                    for (int i = 0; i < folderArray.length; i++) {
                        folderArray[i] = folderArray[i].trim();
                    }

                    ProjectItem selectedProject = (ProjectItem) projectDropdown.getSelectedItem();
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

                    ReleaseCreation fetcher = new ReleaseCreation(
                        currentUserSoeid,
                        zephyrToken,
                        selectedProject.getId(),
                        nameField.getText().trim(),
                        folderArray,
                        dateFormat.format(startDateChooser.getDate()),
                        dateFormat.format(endDateChooser.getDate()),
                        testCycles
                    );

                    fetcher.run();
                    JOptionPane.showMessageDialog(this,
                        "Release created successfully!",
                        "Success",
                        JOptionPane.INFORMATION_MESSAGE);
                    
                    // Navigate back to Zephyr screen
                    String zephyrKey = "ZEPHYR";
                    Component zephyrComp = findComponentByName(mainPanel, zephyrKey);
                    if (zephyrComp != null) {
                        mainPanel.remove(zephyrComp);
                    }
                    mainPanel.add(createZephyrScreen(), zephyrKey);
                    cardLayout.show(mainPanel, zephyrKey);
                    mainPanel.revalidate();
                    mainPanel.repaint();

                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(this,
                        "Error: " + ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                } finally {
                    submitButton.setEnabled(true);
                }
            }
        });

        backButton.addActionListener(e -> {
            String zephyrKey = "ZEPHYR";
            Component zephyrComp = findComponentByName(mainPanel, zephyrKey);
            if (zephyrComp != null) {
                mainPanel.remove(zephyrComp);
            }
            mainPanel.add(createZephyrScreen(), zephyrKey);
            cardLayout.show(mainPanel, zephyrKey);
            mainPanel.revalidate();
            mainPanel.repaint();
        });

        // Add to main container
        mainPanel.add(createReleasePanel, "CREATE_RELEASE");
        cardLayout.show(mainPanel, "CREATE_RELEASE");
    }
