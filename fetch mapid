private void showBulkImportScreen() {
    JPanel importPanel = new JPanel(null);  // Using null layout for absolute positioning
    importPanel.setPreferredSize(new Dimension(800, 600));
    
    // Title
    JLabel titleLabel = new JLabel("Bulk Import Test Cases");
    titleLabel.setFont(new Font("Arial", Font.BOLD, 24));
    titleLabel.setBounds(50, 30, 300, 30);
    
    // File upload section
    JLabel uploadLabel = new JLabel("Upload Import File (.xlsx):");
    uploadLabel.setFont(new Font("Arial", Font.PLAIN, 14));
    uploadLabel.setBounds(50, 100, 200, 30);
    
    JTextField filePathField = new JTextField();
    filePathField.setEditable(false);
    filePathField.setBounds(50, 140, 500, 30);
    
    JButton browseButton = new JButton("Browse");
    browseButton.setFont(new Font("Arial", Font.PLAIN, 14));
    browseButton.setBounds(560, 140, 100, 30);
    
    // Release folder section
    JLabel folderLabel = new JLabel("Select Release Folder:");
    folderLabel.setFont(new Font("Arial", Font.PLAIN, 14));
    folderLabel.setBounds(50, 200, 200, 30);
    
    JTextField folderPathField = new JTextField();
    folderPathField.setEditable(false);
    folderPathField.setBounds(50, 240, 500, 30);
    
    JButton selectFolderButton = new JButton("Select");
    selectFolderButton.setFont(new Font("Arial", Font.PLAIN, 14));
    selectFolderButton.setBounds(560, 240, 100, 30);
    
    // Map ID section with search field and dropdown
    JLabel mapIdLabel = new JLabel("Select Map ID:");
    mapIdLabel.setFont(new Font("Arial", Font.PLAIN, 14));
    mapIdLabel.setBounds(50, 300, 200, 30);
    
    JTextField searchField = new JTextField();
    searchField.setBounds(50, 340, 300, 30);
    
    // Create a class to hold map ID and name
    class MapItem {
        private int id;
        private String name;
        
        public MapItem(int id, String name) {
            this.id = id;
            this.name = name;
        }
        
        public int getId() { return id; }
        public String getName() { return name; }
        
        @Override
        public String toString() { 
            return name; 
        }
    }
    
    // Create the combo box
    JComboBox<MapItem> mapComboBox = new JComboBox<>();
    mapComboBox.setBounds(50, 380, 500, 30);
    
    // Action Buttons
    JButton importButton = new JButton("Import Test Cases");
    importButton.setFont(new Font("Arial", Font.BOLD, 14));
    importButton.setBounds(50, 450, 200, 40);
    importButton.setBackground(new Color(65, 131, 215));
    importButton.setForeground(Color.WHITE);
    importButton.setFocusPainted(false);
    
    JButton backButton = new JButton("Back");
    backButton.setFont(new Font("Arial", Font.BOLD, 14));
    backButton.setBounds(260, 450, 100, 40);
    backButton.setBackground(new Color(190, 190, 190));
    backButton.setForeground(Color.WHITE);
    backButton.setFocusPainted(false);
    
    // Add hover effects
    importButton.addMouseListener(new MouseAdapter() {
        public void mouseEntered(MouseEvent e) {
            importButton.setBackground(new Color(41, 128, 185));
        }
        public void mouseExited(MouseEvent e) {
            importButton.setBackground(new Color(65, 131, 215));
        }
    });
    
    backButton.addMouseListener(new MouseAdapter() {
        public void mouseEntered(MouseEvent e) {
            backButton.setBackground(new Color(160, 160, 160));
        }
        public void mouseExited(MouseEvent e) {
            backButton.setBackground(new Color(190, 190, 190));
        }
    });
    
    // Variables to store file information
    final String[] selectedFilePath = {""};
    final String[] selectedFileName = {""};
    final String[] selectedFolderPath = {""};
    final ArrayList<MapItem> allMaps = new ArrayList<>();  // Store all maps for filtering
    
    // Fetch map data from API
    SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
        @Override
        protected Void doInBackground() throws Exception {
            try {
                // Fetch maps from API
                List<MapItem> maps = fetchMapsFromApi();
                allMaps.addAll(maps);
                return null;
            } catch (Exception e) {
                e.printStackTrace();
                return null;
            }
        }
        
        @Override
        protected void done() {
            // Add default item
            mapComboBox.addItem(new MapItem(0, "Select a Map"));
            
            // Add fetched items
            for (MapItem map : allMaps) {
                mapComboBox.addItem(map);
            }
        }
    };
    worker.execute();
    
    // Real-time filtering as user types
    searchField.getDocument().addDocumentListener(new DocumentListener() {
        @Override
        public void insertUpdate(DocumentEvent e) {
            filterMapDropdown();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            filterMapDropdown();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            filterMapDropdown();
        }
        
        private void filterMapDropdown() {
            String searchText = searchField.getText().toLowerCase().trim();
            
            // Clear current items except the first one (Select a Map)
            while (mapComboBox.getItemCount() > 1) {
                mapComboBox.removeItemAt(1);
            }
            
            // Add matching items
            for (MapItem map : allMaps) {
                if (map.getName().toLowerCase().contains(searchText)) {
                    mapComboBox.addItem(map);
                }
            }
            
            // Show dropdown if there are matching results and search text isn't empty
            if (mapComboBox.getItemCount() > 1 && !searchText.isEmpty()) {
                mapComboBox.showPopup();
            }
        }
    });
    
    // Add action listeners for file and folder selection
    browseButton.addActionListener(e -> {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Excel files", "xlsx", "xls"));
        int result = fileChooser.showOpenDialog(importPanel);
        
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            selectedFilePath[0] = selectedFile.getAbsolutePath();
            selectedFileName[0] = selectedFile.getName();
            filePathField.setText(selectedFilePath[0]);
        }
    });
    
    selectFolderButton.addActionListener(e -> {
        try {
            selectedFolderPath[0] = FolderSelector.selectFolder();
            folderPathField.setText(selectedFolderPath[0]);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error selecting folder: " + ex.getMessage());
        }
    });
    
    importButton.addActionListener(e -> {
        // Validate inputs
        if (selectedFilePath[0].isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a file to import.");
            return;
        }
        
        if (selectedFolderPath[0].isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a release folder.");
            return;
        }
        
        MapItem selectedMap = (MapItem) mapComboBox.getSelectedItem();
        if (selectedMap == null || selectedMap.getId() == 0) {
            JOptionPane.showMessageDialog(null, "Please select a valid Map ID.");
            return;
        }
        
        int mapId = selectedMap.getId();
        
        // Call the import function
        try {
            int result = TestCaseImporter.importTestCases(
                selectedFilePath[0],
                selectedFileName[0],
                selectedFolderPath[0],
                mapId
            );
            
            if (result == 1) {
                JOptionPane.showMessageDialog(null, "Test cases imported successfully!");
                // Reset fields after successful import
                filePathField.setText("");
                folderPathField.setText("");
                mapComboBox.setSelectedIndex(0);
                searchField.setText("");
                selectedFilePath[0] = "";
                selectedFileName[0] = "";
                selectedFolderPath[0] = "";
            } else {
                JOptionPane.showMessageDialog(null, "Failed to import test cases. Please try again.",
                    "Import Failed", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error during import: " + ex.getMessage(),
                "Import Error", JOptionPane.ERROR_MESSAGE);
        }
    });
    
    backButton.addActionListener(e -> {
        cardLayout.show(mainPanel, "PREVIOUS_SCREEN");
    });
    
    // Add components to panel
    importPanel.add(titleLabel);
    importPanel.add(uploadLabel);
    importPanel.add(filePathField);
    importPanel.add(browseButton);
    importPanel.add(folderLabel);
    importPanel.add(folderPathField);
    importPanel.add(selectFolderButton);
    importPanel.add(mapIdLabel);
    importPanel.add(searchField);
    importPanel.add(mapComboBox);
    importPanel.add(importButton);
    importPanel.add(backButton);
    
    // Add to main panel
    mainPanel.add(importPanel, "BULK_IMPORT");
    cardLayout.show(mainPanel, "BULK_IMPORT");
}



// Method to fetch map data from API
private List<MapItem> fetchMapsFromApi() {
    List<MapItem> maps = new ArrayList<>();
    try {
        // API URL
        URL url = new URL("https://your-zephyr-instance/api/maps");
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        conn.setRequestProperty("Authorization", "Bearer " + apiToken);
        
        // Read response
        StringBuilder response = new StringBuilder();
        try (BufferedReader br = new BufferedReader(
                new InputStreamReader(conn.getInputStream(), "utf-8"))) {
            String responseLine;
            while ((responseLine = br.readLine()) != null) {
                response.append(responseLine.trim());
            }
        }
        
        // Parse JSON (using org.json library)
        JSONArray jsonArray = new JSONArray(response.toString());
        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject mapObj = jsonArray.getJSONObject(i);
            int id = mapObj.getInt("id");
            String name = mapObj.getString("name");
            maps.add(new MapItem(id, name));
        }
        
    } catch (Exception e) {
        e.printStackTrace();
        // Handle error - show error message or return empty list
        JOptionPane.showMessageDialog(null, "Error fetching map data: " + e.getMessage(),
            "API Error", JOptionPane.ERROR_MESSAGE);
    }
    
    return maps;
}
