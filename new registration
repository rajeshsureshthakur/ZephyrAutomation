private void createRegistrationScreen() {
        JPanel registerPanel = new JPanel();
        registerPanel.setLayout(new BorderLayout());

        // Title at the top
        JPanel titlePanel = new JPanel();
        JLabel titleLabel = new JLabel("User Registration");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 28));
        titlePanel.add(titleLabel);
        registerPanel.add(titlePanel, BorderLayout.NORTH);

        // Main content panel with null layout for fixed positioning
        JPanel contentPanel = new JPanel(null);
        contentPanel.setPreferredSize(new Dimension(600, 500));

        // Name Field
        JLabel nameLabel = new JLabel("Name: *");
        nameLabel.setFont(new Font("Arial", Font.PLAIN, 16));
        nameLabel.setBounds(50, 20, 150, 30);
        
        JTextField nameField = new JTextField();
        nameField.setFont(new Font("Arial", Font.PLAIN, 16));
        nameField.setBounds(200, 20, 300, 30);

        // SOEID Field
        JLabel soeidLabel = new JLabel("SOEID: *");
        soeidLabel.setFont(new Font("Arial", Font.PLAIN, 16));
        soeidLabel.setBounds(50, 70, 150, 30);
        
        JTextField soeidField = new JTextField();
        soeidField.setFont(new Font("Arial", Font.PLAIN, 16));
        soeidField.setBounds(200, 70, 300, 30);

        // PIN Field
        JLabel pinLabel = new JLabel("PIN: *");
        pinLabel.setFont(new Font("Arial", Font.PLAIN, 16));
        pinLabel.setBounds(50, 120, 150, 30);
        
        JPasswordField pinField = new JPasswordField(4);
        pinField.setFont(new Font("Arial", Font.PLAIN, 16));
        pinField.setHorizontalAlignment(JTextField.CENTER);
        pinField.setBounds(200, 120, 100, 30);

        // PIN validation label
        JLabel pinValidationLabel = new JLabel("(Enter 4-digit PIN)");
        pinValidationLabel.setFont(new Font("Arial", Font.ITALIC, 12));
        pinValidationLabel.setForeground(Color.GRAY);
        pinValidationLabel.setBounds(310, 120, 200, 30);

        // Project Selection
        JLabel projectLabel = new JLabel("Project: *");
        projectLabel.setFont(new Font("Arial", Font.PLAIN, 16));
        projectLabel.setBounds(50, 170, 150, 30);
        
        JComboBox<ProjectItem> projectDropdown = new JComboBox<>();
        projectDropdown.setFont(new Font("Arial", Font.PLAIN, 16));
        projectDropdown.setBounds(200, 170, 300, 30);
        populateProjectDropdown(projectDropdown);

        // PIN validation
        pinField.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) { validatePin(); }
            public void insertUpdate(DocumentEvent e) { validatePin(); }
            public void removeUpdate(DocumentEvent e) { validatePin(); }

            private void validatePin() {
                String pin = new String(pinField.getPassword());
                if (pin.length() > 4) {
                    pinField.setText(pin.substring(0, 4));
                    return;
                }
                
                if (!pin.matches("\\d*")) {
                    pinValidationLabel.setText("Only digits allowed");
                    pinValidationLabel.setForeground(Color.RED);
                    pinField.setText(pin.replaceAll("\\D", ""));
                } else if (pin.length() < 4) {
                    pinValidationLabel.setText("PIN must be 4 digits");
                    pinValidationLabel.setForeground(Color.RED);
                } else if (pin.length() == 4) {
                    pinValidationLabel.setText("(Valid PIN)");
                    pinValidationLabel.setForeground(Color.GREEN);
                }
            }
        });

        pinField.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isDigit(c) || 
                    pinField.getPassword().length >= 4) {
                    e.consume();
                }
            }
        });

        // Register Button
        JButton registerButton = new JButton("Register");
        registerButton.setFont(new Font("Arial", Font.PLAIN, 14));
        registerButton.setBounds(200, 250, 200, 35);

        // Back to Login link
        JButton loginLink = new JButton("Back to Login");
        loginLink.setFont(new Font("Arial", Font.PLAIN, 14));
        loginLink.setBounds(200, 300, 200, 35);
        loginLink.setBorderPainted(false);
        loginLink.setContentAreaFilled(false);
        loginLink.setForeground(Color.BLUE);
        loginLink.setCursor(new Cursor(Cursor.HAND_CURSOR));

        // Add action listeners
        registerButton.addActionListener(e -> {
            String name = nameField.getText().trim();
            String soeid = soeidField.getText().trim();
            String pin = new String(pinField.getPassword());
            
            if (name.isEmpty() || soeid.isEmpty()) {
                JOptionPane.showMessageDialog(this,
                    "Please fill all required fields",
                    "Validation Error",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!pin.matches("\\d{4}")) {
                JOptionPane.showMessageDialog(this,
                    "Please enter a valid 4-digit PIN",
                    "Validation Error",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }

            ProjectItem selectedProject = (ProjectItem)projectDropdown.getSelectedItem();
            if (selectedProject == null || selectedProject.getId() == 0) {
                JOptionPane.showMessageDialog(this,
                    "Please select a project",
                    "Validation Error",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (registerUser(soeid, pin, name, selectedProject.getId())) {
                JOptionPane.showMessageDialog(this,
                    "Registration successful! Please login.",
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);
                cardLayout.show(mainPanel, "LOGIN");
            }
        });

        loginLink.addActionListener(e -> cardLayout.show(mainPanel, "LOGIN"));

        // Add all components to content panel
        contentPanel.add(nameLabel);
        contentPanel.add(nameField);
        contentPanel.add(soeidLabel);
        contentPanel.add(soeidField);
        contentPanel.add(pinLabel);
        contentPanel.add(pinField);
        contentPanel.add(pinValidationLabel);
        contentPanel.add(projectLabel);
        contentPanel.add(projectDropdown);
        contentPanel.add(registerButton);
        contentPanel.add(loginLink);

        // Add scroll capability
        JScrollPane scrollPane = new JScrollPane(contentPanel);
        registerPanel.add(scrollPane, BorderLayout.CENTER);

        // Add to main container
        mainPanel.add(registerPanel, "REGISTER");
    }

    // Update the registerUser method to include project_id
    private boolean registerUser(String soeid, String pin, String name, int projectId) {
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
                // First check if user already exists
                String checkSql = "SELECT COUNT(*) FROM USERS WHERE SOEID = ?";
                try (PreparedStatement checkStmt = conn.prepareStatement(checkSql)) {
                    checkStmt.setString(1, soeid);
                    try (ResultSet rs = checkStmt.executeQuery()) {
                        if (rs.next() && rs.getInt(1) > 0) {
                            JOptionPane.showMessageDialog(this,
                                "SOEID already exists!",
                                "Registration Error",
                                JOptionPane.ERROR_MESSAGE);
                            return false;
                        }
                    }
                }
                
                // Insert new user
                String insertSql = "INSERT INTO USERS (SOEID, PASSWORD, USER_NAME, PROJECT_ID) VALUES (?, ?, ?, ?)";
                try (PreparedStatement pstmt = conn.prepareStatement(insertSql)) {
                    pstmt.setString(1, soeid);
                    pstmt.setString(2, pin);
                    pstmt.setString(3, name);
                    pstmt.setInt(4, projectId);
                    pstmt.executeUpdate();
                    return true;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                "Database error: " + e.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
