private String currentUserSoeid;  // Add this as class member

    private void handleSuccessfulLogin(String soeid) {
        this.currentUserSoeid = soeid;
        cardLayout.show(mainPanel, "HOME");
    }

    // Modify the login button action listener in createLoginScreen()
    loginButton.addActionListener(e -> {
        String soeid = soeidField.getText();
        String password = new String(passwordField.getPassword());
        
        if (validateLogin(soeid, password)) {
            handleSuccessfulLogin(soeid);
        } else {
            JOptionPane.showMessageDialog(this,
                "Invalid SOEID or Password",
                "Login Error",
                JOptionPane.ERROR_MESSAGE);
        }
    });

    private String getTimeBasedGreeting() {
        Calendar now = Calendar.getInstance();
        int hourOfDay = now.get(Calendar.HOUR_OF_DAY);
        
        if (hourOfDay >= 0 && hourOfDay < 12) {
            return "Good Morning";
        } else if (hourOfDay >= 12 && hourOfDay < 16) {
            return "Good Afternoon";
        } else {
            return "Good Evening";
        }
    }
    
    private JPanel createHomeScreen() {
        JPanel homePanel = new JPanel();
        homePanel.setLayout(new BoxLayout(homePanel, BoxLayout.Y_AXIS));
        
        // Add greeting panel
        JPanel greetingPanel = new JPanel();
        greetingPanel.setLayout(new FlowLayout(FlowLayout.CENTER));
        JLabel greetingLabel = new JLabel(getTimeBasedGreeting() + ", " + currentUserSoeid);
        greetingLabel.setFont(new Font("Arial", Font.BOLD, 16));
        greetingPanel.add(greetingLabel);
        
        JLabel titleLabel = new JLabel("Test Management System");
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 28));
        
        // Existing buttons and components
        Dimension buttonSize = new Dimension(240, 48);
        
        JButton zephyrButton = new JButton("Zephyr");
        zephyrButton.setMaximumSize(buttonSize);
        zephyrButton.setPreferredSize(buttonSize);
        zephyrButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        zephyrButton.setFont(new Font("Arial", Font.PLAIN, 14));
        zephyrButton.addActionListener(e -> cardLayout.show(mainPanel, "ZEPHYR"));
        
        JButton jiraButton = new JButton("JIRA");
        jiraButton.setMaximumSize(buttonSize);
        jiraButton.setPreferredSize(buttonSize);
        jiraButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        jiraButton.setFont(new Font("Arial", Font.PLAIN, 14));
        jiraButton.addActionListener(e -> cardLayout.show(mainPanel, "JIRA"));
        
        // Add logout button
        JButton logoutButton = new JButton("Logout");
        logoutButton.setMaximumSize(new Dimension(120, 30));
        logoutButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        logoutButton.setFont(new Font("Arial", Font.PLAIN, 12));
        logoutButton.addActionListener(e -> {
            currentUserSoeid = null;
            cardLayout.show(mainPanel, "LOGIN");
        });
        
        // Footer panel
        JPanel footerPanel = new JPanel();
        footerPanel.setMaximumSize(new Dimension(600, 40));
        footerPanel.setPreferredSize(new Dimension(600, 40));
        JLabel footerLabel = new JLabel("Developed by Channels NFT Team");
        footerLabel.setFont(new Font("Arial", Font.ITALIC, 12));
        footerPanel.add(footerLabel);
        
        // Add all components to the panel
        homePanel.add(Box.createVerticalStrut(20));
        homePanel.add(greetingPanel);
        homePanel.add(Box.createVerticalStrut(20));
        homePanel.add(titleLabel);
        homePanel.add(Box.createVerticalStrut(50));
        homePanel.add(zephyrButton);
        homePanel.add(Box.createVerticalStrut(30));
        homePanel.add(jiraButton);
        homePanel.add(Box.createVerticalStrut(30));
        homePanel.add(logoutButton);
        homePanel.add(Box.createVerticalGlue());
        homePanel.add(footerPanel);
        
        return homePanel;
    }



  private String fetchUserName(String soeid) {
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
                String sql = "SELECT USER_NAME FROM USERS WHERE SOEID = ?";
                try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                    pstmt.setString(1, soeid);
                    try (ResultSet rs = pstmt.executeQuery()) {
                        if (rs.next()) {
                            return rs.getString("USER_NAME");
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                "Error fetching user name: " + e.getMessage(),
                "Database Error",
                JOptionPane.ERROR_MESSAGE);
        }
        return "User";  // Default fallback if name cannot be fetched
    }





loginButton.addActionListener(e -> {
        String soeid = soeidField.getText().trim();
        String password = new String(passwordField.getPassword());
        
        if (soeid.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                "Please enter both SOEID and password",
                "Login Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            if (validateLogin(soeid, password)) {
                currentUserSoeid = soeid;
                String userName = fetchUserName(soeid);
                if (userName != null) {
                    currentUserName = userName;
                    mainPanel.remove(mainPanel.getComponent(2));
                    mainPanel.add(createHomeScreen(), "HOME", 2);
                    cardLayout.show(mainPanel, "HOME");
                } else {
                    JOptionPane.showMessageDialog(this,
                        "Error retrieving user information",
                        "Login Error",
                        JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this,
                    "Invalid SOEID or Password",
                    "Login Error",
                    JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this,
                "An error occurred during login: " + ex.getMessage(),
                "Login Error",
                JOptionPane.ERROR_MESSAGE);
        }
    });







// Create a main content panel to group the input fields and login button
        JPanel contentPanel = new JPanel();
        contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));
        contentPanel.setAlignmentX(Component.CENTER_ALIGNMENT);
        // Set maximum size to prevent excessive stretching
        contentPanel.setMaximumSize(new Dimension(400, 250));
        
        // SOEID field
        JPanel soeidPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        JLabel soeidLabel = new JLabel("SOEID:");
        JTextField soeidField = new JTextField(20);
        soeidPanel.add(soeidLabel);
        soeidPanel.add(soeidField);
        
        // Password field
        JPanel passwordPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        JLabel passwordLabel = new JLabel("Password:");
        JPasswordField passwordField = new JPasswordField(20);
        passwordPanel.add(passwordLabel);
        passwordPanel.add(passwordField);
        
        // Login button
        JButton loginButton = new JButton("Login");
        loginButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        // Register link
        JButton registerLink = new JButton("New user? Register");
        registerLink.setBorderPainted(false);
        registerLink.setContentAreaFilled(false);
        registerLink.setForeground(Color.BLUE);
        registerLink.setCursor(new Cursor(Cursor.HAND_CURSOR));
        registerLink.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        // Add components to content panel with specific spacing
        contentPanel.add(Box.createVerticalStrut(20));
        contentPanel.add(soeidPanel);
        contentPanel.add(Box.createVerticalStrut(10));
        contentPanel.add(passwordPanel);
        contentPanel.add(Box.createVerticalStrut(20));
        contentPanel.add(loginButton);
        contentPanel.add(Box.createVerticalStrut(10));
        contentPanel.add(registerLink);
        
        // Add everything to main panel with controlled spacing
        loginPanel.add(Box.createVerticalStrut(50));
        loginPanel.add(titleLabel);
        loginPanel.add(Box.createVerticalStrut(30));
        loginPanel.add(loginHeading);
        loginPanel.add(Box.createVerticalStrut(30));
        loginPanel.add(contentPanel);
        // Add flexible space that will push everything up
        loginPanel.add(Box.createVerticalGlue());



private JTextField createStyledTextField() {
        JTextField field = new JTextField(20);
        field.setFont(new Font("Arial", Font.PLAIN, 16));
        field.setPreferredSize(new Dimension(250, 30));
        return field;
    }

    // Helper method to create consistent styled password fields
    private JPasswordField createStyledPasswordField() {
        JPasswordField field = new JPasswordField(20);
        field.setFont(new Font("Arial", Font.PLAIN, 16));
        field.setPreferredSize(new Dimension(250, 30));
        return field;
    }

    // Helper method to create consistent styled labels
    private JLabel createStyledLabel(String text) {
        JLabel label = new JLabel(text);
        label.setFont(new Font("Arial", Font.PLAIN, 16));
        return label;
    }
