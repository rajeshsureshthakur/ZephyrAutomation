JButton jqlSearchButton = new JButton("Search JQL");
jqlSearchButton.setPreferredSize(new Dimension(100, 25));
jqlSearchButton.addActionListener(e -> showJQLSearchWindow());

private void showJQLSearchWindow() {
        JDialog searchDialog = new JDialog(this, "Search JQL", true);
        searchDialog.setLayout(new BorderLayout(10, 10));
        searchDialog.setSize(600, 400);
        searchDialog.setLocationRelativeTo(this);

        // Search Panel
        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 10));
        JLabel folderLabel = new JLabel("Folder Name:");
        JTextField searchField = new JTextField(20);
        JButton searchButton = new JButton("Search");
        
        searchPanel.add(folderLabel);
        searchPanel.add(searchField);
        searchPanel.add(searchButton);

        // Results Panel with JTable
        String[] columnNames = {"Folder Name", "JQL"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;  // Make table non-editable
            }
        };
        
        JTable resultTable = new JTable(model);
        resultTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        resultTable.getColumnModel().getColumn(0).setPreferredWidth(150);
        resultTable.getColumnModel().getColumn(1).setPreferredWidth(450);
        
        JScrollPane scrollPane = new JScrollPane(resultTable);

        // Add search functionality
        searchButton.addActionListener(e -> {
            String searchTerm = searchField.getText().trim();
            if (!searchTerm.isEmpty()) {
                searchJQLs(searchTerm, model);
            }
        });

        // Add components to dialog
        searchDialog.add(searchPanel, BorderLayout.NORTH);
        searchDialog.add(scrollPane, BorderLayout.CENTER);

        searchDialog.setVisible(true);
    }

    private void searchJQLs(String searchTerm, DefaultTableModel model) {
        // Clear existing results
        model.setRowCount(0);
        
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
                String sql = "SELECT FOLDER_NAME, JQL FROM FOLDER_JQL_MAPPING WHERE FOLDER_NAME LIKE ?";
                try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                    pstmt.setString(1, "%" + searchTerm + "%");
                    
                    try (ResultSet rs = pstmt.executeQuery()) {
                        while (rs.next()) {
                            String folderName = rs.getString("FOLDER_NAME");
                            String jql = rs.getString("JQL");
                            model.addRow(new Object[]{folderName, jql});
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                "Error searching JQLs: " + e.getMessage(),
                "Database Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }






private void showJQLSearchWindow() {
        // Create and setup dialog
        JDialog searchDialog = new JDialog(this, "Search JQL", true);
        searchDialog.setLayout(new BorderLayout(10, 10));
        searchDialog.setSize(600, 400);
        searchDialog.setLocationRelativeTo(this);

        // Top search panel
        JPanel searchPanel = new JPanel();
        searchPanel.setLayout(new BoxLayout(searchPanel, BoxLayout.Y_AXIS));
        searchPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // Search components panel (horizontal)
        JPanel searchComponentsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 0));
        JLabel folderLabel = new JLabel("Folder Name:");
        folderLabel.setFont(new Font("Arial", Font.PLAIN, 14));
        JTextField searchField = new JTextField(20);
        searchField.setFont(new Font("Arial", Font.PLAIN, 14));
        JButton searchButton = new JButton("Search");
        searchButton.setFont(new Font("Arial", Font.PLAIN, 14));
        
        searchComponentsPanel.add(folderLabel);
        searchComponentsPanel.add(searchField);
        searchComponentsPanel.add(searchButton);

        // Info text line
        JLabel infoLabel = new JLabel("Search results will show folder names containing the entered text");
        infoLabel.setFont(new Font("Arial", Font.ITALIC, 12));
        infoLabel.setForeground(Color.GRAY);
        JPanel infoPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        infoPanel.add(infoLabel);

        // Add to search panel
        searchPanel.add(searchComponentsPanel);
        searchPanel.add(Box.createVerticalStrut(5));
        searchPanel.add(infoPanel);

        // Results table
        String[] columnNames = {"Folder Name", "JQL"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        JTable resultTable = new JTable(model);
        resultTable.setFont(new Font("Arial", Font.PLAIN, 12));
        resultTable.getTableHeader().setFont(new Font("Arial", Font.BOLD, 12));
        resultTable.setRowHeight(25);
        resultTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        
        // Set column widths
        resultTable.getColumnModel().getColumn(0).setPreferredWidth(150);
        resultTable.getColumnModel().getColumn(1).setPreferredWidth(450);

        // Add table to scroll pane
        JScrollPane scrollPane = new JScrollPane(resultTable);
        scrollPane.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10));

        // Add everything to dialog
        searchDialog.add(searchPanel, BorderLayout.NORTH);
        searchDialog.add(scrollPane, BorderLayout.CENTER);

        // Make dialog visible
        searchDialog.setVisible(true);
    }
